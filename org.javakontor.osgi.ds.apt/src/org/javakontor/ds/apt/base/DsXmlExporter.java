package org.javakontor.ds.apt.base;

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.tools.Diagnostic;
import javax.tools.FileObject;
import javax.tools.StandardLocation;

import org.javakontor.ds.DsResourceListener;
import org.jdom.Comment;
import org.jdom.Document;
import org.jdom.Namespace;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

public class DsXmlExporter {
	private org.jdom.Element component = null;
	private String className = null;

	public DsXmlExporter() {
		component =
			new org.jdom.Element(
				"component",
				Namespace.getNamespace("scr", "http://www.osgi.org/xmlns/scr/v1.1.0")
			);
	}

	public void setClassName(String className) {
		this.className = className;
	}

	public void exportXml(ProcessingEnvironment processingEnv) {
		Document doc = new Document();
		doc.addContent(new Comment("Generated by DsAnnotationProcessor - Do not edit"));
		doc.setRootElement(component);

		XMLOutputter fmt = new XMLOutputter();
		Format format = Format.getPrettyFormat();
		format.setIndent("    ");
		fmt.setFormat(format);

		OutputStream os = null;
		try {
			String fileName = className + ".xml";

			DsResourceListener.get().addObservedResource(fileName);

//          for (StandardLocation loc : StandardLocation.values()) {
//              if (loc.isOutputLocation()) {
//                  FileObject fo = processingEnv.getFiler().createResource(loc, "", ".");
//                  System.out.println(loc + ": " + fo.toUri());
//              }
//          }
			final FileObject fo =
				processingEnv.getFiler().createResource(
					StandardLocation.SOURCE_OUTPUT,
					"",
					fileName
				);
			os = fo.openOutputStream();

			fmt.output(doc, os);
			processingEnv.getMessager().printMessage(
				Diagnostic.Kind.NOTE,
				"DsAnnotationProcessor erzeugt: " + fo.toUri()
			);

		} catch (Throwable e1) {

			// TODO Auto-generated catch block
			e1.printStackTrace();
		} finally {
			try {
				os.close();
			} catch (IOException e) {

				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void setComponentAttribute(String name, String value) {
		if ((value != null) && (value.length() > 0)) {
			component.setAttribute(name, value);
		}
	}

	public void addProperty(String property) {
		System.out.println("Property: " + property);
		int posEqual = property.indexOf('=');
		int posType = property.indexOf(':');
		if (posEqual > 0) {
			String key = "";
			String type = "String";
			if ((posType > 0) && (posType < posEqual)) {
				key = property.substring(0, posType);
				type = property.substring(posType + 1, posEqual);
			} else {
				key = property.substring(0, posEqual);

			}
			String value = property.substring(posEqual + 1);

			org.jdom.Element propertyElement = new org.jdom.Element("property");
			component.addContent(propertyElement);

			propertyElement.setAttribute("name", key);
			propertyElement.setAttribute("type", type);
			propertyElement.setAttribute("value", value);

		}

	}

	public void addReference(
		String serviceInterface,
		String policy,
		String cardinality,
		String target,
		String name,
		String bindMethodName,
		String unbindMethodName
	) {
		org.jdom.Element reference = new org.jdom.Element("reference");
		reference.setAttribute("name", serviceInterface);

		component.getContent().add(reference);
		reference.setAttribute("policy", policy);
		reference.setAttribute("cardinality", cardinality);
		reference.setAttribute("target", target);
		reference.setAttribute("name", name);
		reference.setAttribute("interface", serviceInterface);
		if (unbindMethodName != null) {
			reference.setAttribute("unbind", unbindMethodName);
		}
		reference.setAttribute("bind", bindMethodName);

	}

	public void addServices(List<String> interfaces) {
		org.jdom.Element service = new org.jdom.Element("service");
		component.getContent().add(service);
		for (String serviceInterface : interfaces) {
			org.jdom.Element provide = new org.jdom.Element("provide");
			provide.setAttribute("interface", serviceInterface);
			service.getContent().add(provide);
		}
	}

	public void addImplementation(String implementationClass) {
		org.jdom.Element implementation = new org.jdom.Element("implementation");
		implementation.setAttribute("class", implementationClass);
		component.getContent().add(implementation);
	}

}
